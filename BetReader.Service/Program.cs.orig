using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using BetReader.Constans;
using BetReader.Model.Entities;
using BetReader.Scraper;
using BetReader.Scraper.Core;
using BetReader.Service.Core.DataAccess;
using BetReader.Service.Core.DataAccess.Services;
using BetReader.Service.Core.Jobs;
using BetReader.Web.Model.Services;
using Microsoft.Practices.Unity;
using OpenQA.Selenium.Chrome;
using Quartz;
using Quartz.Impl;

namespace BetReader.Service
{
    class Program
    {
        static void Main(string[] args)
        {
            var container = new UnityContainer();

            container.RegisterType<BbFeedProcessor, BbFeedProcessor>();
            container.RegisterType<BbFeedReadJob, BbFeedReadJob>();
            container.RegisterType<CouponRepository, CouponRepository>(new HierarchicalLifetimeManager());

            var rnd = new Random();

<<<<<<< HEAD
            while (true)
            {
                var processor = new BbFeedProcessor(new ChromeDriver(GlobalConstants.ChromeDriverPath));
                var couponRepository = container.Resolve<CouponRepository>();

                using (processor)
                {
                    List<Coupon> coupons = processor.GetValuableCoupons().ToList();

                    foreach (Coupon coupon in coupons)
                    {
                        couponRepository.AddAsUnique(coupon);
                    }
                }

                Thread.Sleep(new TimeSpan(0, 1, 0));
            }
=======
//            while (true)
//            {
//                var processor = new BbFeedProcessor(new ChromeDriver(GlobalConstants.ChromeDriverPath));
//                var couponRepository = container.Resolve<CouponRepository>();
//
//                using (processor)
//                {
//                    List<Coupon> coupons = processor.GetValuableCoupons().ToList();
//
//                    foreach (Coupon coupon in coupons)
//                    {
//                        couponRepository.AddAsUnique(coupon);
//                    }
//                }
//
//                Thread.Sleep(new TimeSpan(0, 1, 0));
//            }
>>>>>>> origin/master

            try
            {
                // construct a scheduler factory
                ISchedulerFactory schedFact = new StdSchedulerFactory();

                // get a scheduler
                IScheduler sched = schedFact.GetScheduler();
                sched.Start();

                IJobDetail bbJob = JobBuilder.Create<BbFeedReadJob>()
                    .Build();

                bbJob.JobDataMap["rnd"] = rnd;
                bbJob.JobDataMap["unityContainer"] = container;

                ITrigger trigger = TriggerBuilder.Create()
                    .WithIdentity(new TriggerKey("bbTrigger"))
                    .StartNow()
//                    .WithSimpleSchedule(x => x
//                        .WithIntervalInSeconds(40)
//                        .RepeatForever())
                    .Build();

                sched.ScheduleJob(bbJob, trigger);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }


            Console.ReadKey();
        }
    }
}
